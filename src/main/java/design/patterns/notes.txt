Creational pattern: For creation of objects
    Factory method
    Abstract factory/Factory of factories
    Singleton
    Builder
    Prototype: Enables cloning of an object having a hierarchical structure without knowing internals of it

Structural patterns: To enable combining objects into flexible structures
    Adapter: Make objects with incompatible interfaces work together by introducing an adapter between
    Bridge: Organizing classes into different hierarchies instead of having all dimensions of evolution
     in same hierarchy so that they can evolve independently. Then use HAS-A relationship to combine those hierarchies.
    Composite: When we have a structure consisting of a tree hierarchy of objects(via composition) and
    we need all objects in the structure to exhibit certain common behaviour, like rotating/translating all
    child objects in a scenegraph in a graphics program
    Facade: Enables us to work easily with a complex system via a simple interface(facade),
    which otherwise needs lots of complexities to be handled in your code like instantiating objects, tracking them
    invoking methods in a specific order etc. Good example is driver manager for JDBC drivers that enable us to execute SQL
    queries without us handling internal complexities of connection, statement etc.
    Flyweight: Enables creation of large number of expensive objects(too much memory, too much time) by sharing properties
    which are same across objects, and hence can be influenced by client(extrinsic properties)
    Proxy: If a component performs a task but doesnt perform some other basic tasks we need it to do before performing
    its main task, proxy object cab be instead used which performs those additional tasks before delegating request
    to main component

Behavioural patterns: To assign responsibilities amongst objects
    Chain-of-Responsibility: If a request needs to be processed for multiple contexts, then instead of putting all processing
    in same object(violating S,O of SOLID) we implement handling of those contexts in stand alone objects(handlers), and then chain
    together those handlers to process the request


